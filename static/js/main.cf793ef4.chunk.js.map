{"version":3,"sources":["components/Info/InfoRow.jsx","components/Info/InfoContainer.jsx","constants/constants.jsx","components/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["InfoRow","className","heading","children","defaultProps","InfoContainer","data","name","weather","speed","wind","main","temp","humidity","icon","map","id","description","key","src","alt","title","DELAY_SEARCHING","Main","state","inputValue","error","loading","DebounceSubmitHandler","_debounce","submitHandler","bind","delaySearching","inputChange","e","setState","target","value","getCityData","param","url","axios","get","handleChange","this","then","city","catch","finally","ifFindCity","isLoading","type","placeholder","autoComplete","required","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf793ef4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst propTypes = {\r\n  className: PropTypes.string,\r\n  heading: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n  ]).isRequired,\r\n};\r\n\r\nconst defaultProps = {\r\n  className: null,\r\n};\r\n\r\nconst InfoRow = ({ className, heading, children }) => (\r\n  <div className=\"info__row\">\r\n    <p className=\"info__name\">{ heading }</p>\r\n    <p className={`info__value ${className}`}>{ children }</p>\r\n  </div>\r\n);\r\n\r\nInfoRow.propTypes = propTypes;\r\nInfoRow.defaultProps = defaultProps;\r\n\r\nexport default InfoRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport InfoRow from './InfoRow';\r\n\r\nconst propTypes = {\r\n  data: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    weather: PropTypes.array,\r\n    wind: PropTypes.shape({\r\n      speed: PropTypes.number,\r\n    }),\r\n    main: PropTypes.shape({\r\n      temp: PropTypes.number,\r\n      humidity: PropTypes.number,\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nconst defaultProps = {};\r\n\r\nconst InfoContainer = ({ data }) => {\r\n  const {\r\n    name,\r\n    weather,\r\n    wind: { speed },\r\n    main: {\r\n      temp,\r\n      humidity,\r\n    },\r\n  } = data;\r\n\r\n  const [{ icon, main }] = weather;\r\n\r\n  const getDescription = () => (\r\n    weather.map(({ id, description }) => (\r\n      <span key={id}>{ description }</span>\r\n    ))\r\n  );\r\n\r\n  return (\r\n    <div className=\"info\">\r\n      <div className=\"info__description\">\r\n        <InfoRow className=\"info__value-city\" heading=\"City\">\r\n          {name}\r\n        </InfoRow>\r\n        <InfoRow className=\"info__value-temperature\" heading=\"Temperature\">\r\n          {temp}\r\n          â„ƒ\r\n        </InfoRow>\r\n        <InfoRow className=\"info__value-humidity\" heading=\"Humidity\">\r\n          {humidity}\r\n          %\r\n        </InfoRow>\r\n        <InfoRow className=\"info__value-wind\" heading=\"Wind\">\r\n          {speed}\r\n          m/s\r\n        </InfoRow>\r\n        <InfoRow className=\"info__value-description\" heading=\"Description\">\r\n          { getDescription() }\r\n        </InfoRow>\r\n      </div>\r\n      <div className=\"info__show\">\r\n        <img src={`https://openweathermap.org/img/w/${icon}.png`} alt={main} title={main} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nInfoContainer.propTypes = propTypes;\r\nInfoContainer.defaultProps = defaultProps;\r\n\r\nexport default InfoContainer;\r\n","export const DELAY_SEARCHING = 1000;\r\n\r\nexport default DELAY_SEARCHING;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { debounce as _debounce } from 'lodash';\r\n\r\nimport InfoContainer from './Info/InfoContainer';\r\nimport delaySearching from '../constants/constants';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    inputValue: '',\r\n    error: true,\r\n    loading: false,\r\n    weather: null,\r\n  };\r\n\r\n  DebounceSubmitHandler = _debounce(this.submitHandler.bind(this), delaySearching, false);\r\n\r\n  componentDidMount() {\r\n    this.getCityData()\r\n      .then(({ data: weather }) => this.setState({ weather }));\r\n  }\r\n\r\n  inputChange = (e) => {\r\n    this.setState({ inputValue: e.target.value, loading: true });\r\n  }\r\n\r\n  getCityData = (param) => {\r\n    const city = param || 'Kyiv';\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?units=metric&appid=2ec7f7b5fab44885766bbe4fc05fde4f&q=${city}`;\r\n    return axios.get(url);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.inputChange(e);\r\n    this.DebounceSubmitHandler();\r\n  }\r\n\r\n  submitHandler() {\r\n    const { inputValue: city } = this.state;\r\n\r\n    this.getCityData(city)\r\n      .then(({ data: weather }) => this.setState({ weather, error: true }))\r\n      .catch(() => { this.setState({ error: false }); })\r\n      .finally(() => { this.setState({ loading: false }); });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      weather,\r\n      error: ifFindCity,\r\n      loading: isLoading,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"weather\">\r\n        <div className=\"weather__form\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"Write the city\"\r\n            autoComplete=\"off\"\r\n            required\r\n            className=\"weather__input\"\r\n            value={this.state.inputValue}\r\n            onChange={this.handleChange}\r\n          />\r\n          { isLoading && <div className=\"weather__preloader\" /> }\r\n        </div>\r\n        { ifFindCity ? weather && <InfoContainer data={weather} /> : <p className=\"weather__notfound\">The City not found</p> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport './styles/index.css';\nimport Main from './components/Main';\n\nconst App = () => (<Main />);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}